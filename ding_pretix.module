<?php

/**
 * @file
 * Ding Pretix module.
 */

/**
 * Implements hook_permission().
 */
function ding_pretix_permission() {
  return [
    'administer pretix settings' => [
      'title' => t('Administer pretix settings'),
      'description' => t('Perform administration tasks for ding_pretix.'),
    ],
  ];
}

/**
 * Implements hook_secure_permissions().
 */
function ding_pretix_secure_permissions($role) {
  $permissions = [
    'administrators' => [
      'administer pretix settings',
    ],
  ];

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_menu().
 */
function ding_pretix_menu() {
  $items = [];

  $items['admin/config/ding/pretix'] = [
    'title' => 'Pretix settings',
    'description' => 'Settings and defaults for Pretix integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_pretix_admin_settings_form'],
    'access arguments' => ['administer pretix settings'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/ding_pretix.admin.inc',
  ];

  return $items;
}

/**
 * Implements hook_field_formatter_info().
 */
function ding_pretix_field_formatter_info() {
  return [
    'ding_pretix_default' => [
      'label' => t('Default'),
      'field types' => [
        'ding_pretix_ticket_link',
      ],
    ],
  ];
}

/**
 * Implements hook_node_insert().
 */
function ding_pretix_node_insert($node) {
  // We only handles event nodes.
  if ($node->type === 'ding_event') {
    module_load_include('inc', 'ding_pretix', 'includes/ding_pretix.api_module');
    $service_settings = variable_get('ding_pretix', []);

    if ($node->pretix['maintain_copy'] === 1) {

      $result = _ding_pretix_create_event($node, $service_settings);

      if (201 === (int) $result->code) {
        $pretix_info = _ding_pretix_insert_pretix_node_info($node, $service_settings['organizer_slug'], $result->data);

        // Set pdf ticket plugin.
        $use_pdf_tickets = $node->pretix['ticket_form'] === 'pdf_ticket';
        $results[] = _ding_pretix_update_pdf_plugin($result->data, $use_pdf_tickets, $service_settings, $pretix_info['pretix_slug']);

        // Set ticket price.
        $items = _ding_pretix_get_admission_items($service_settings, $pretix_info['pretix_slug']);
        foreach ($items as $item) {
          $results[] = _ding_pretix_update_item($node, $item, $service_settings, $pretix_info['pretix_slug']);
        }

        // Set correct quota.
        $quota = _ding_pretix_get_quota($items, $service_settings, $pretix_info['pretix_slug']);
        $results[] = _ding_pretix_update_quota_size($quota, $service_settings, $pretix_info['pretix_slug'], $pretix_info['capacity']);

        // Set event to 'live' if node is published.
        $results[] = _ding_pretix_update_live($node->status, $service_settings, $pretix_info['pretix_slug']);

        $errors = array_filter($results, function ($result) {
          return isset($result->error);
        });
        if (!empty($errors)) {
          drupal_set_message(t('There was a problem configuring the event (' . $node->title . ') in Pretix. Please verify in Pretix that all settings for the event are correct.'), 'error');
        }
        else {
          drupal_set_message(t('The event (' . $node->title . ') was successfully created in Pretix.'));
        }
      }
      else {
        drupal_set_message(t('The event (' . $node->title . ') could not be created in Pretix. Contact an administrator.'), 'error');
      }
    }
    else {
      _ding_pretix_insert_pretix_node_info($node, $service_settings['organizer_slug']);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function ding_pretix_node_update($node) {
  if ($node->type == 'ding_event') {
    module_load_include('inc', 'ding_pretix', 'includes/ding_pretix.api_module');

    $pretix_info = _ding_pretix_get_pretix_node_info($node->nid);
    $service_settings = variable_get('ding_pretix', []);

    if (empty($pretix_info['pretix_slug'])) {
      if ($node->pretix['maintain_copy'] === 1) {
        // If the node has not previously been set to maintain a copy in
        // Pretix we need to save it first.
        ding_pretix_node_insert($node);
      }
      else {
        // Only save pretix node info in Drupal.
        _ding_pretix_update_pretix_node_info($node);
      }
    }
    else {

      if ($node->pretix['maintain_copy'] === 1) {
        // Update existing event in pretix.
        $result = _ding_pretix_update_event($node, $service_settings, $pretix_info['pretix_slug']);

        if (200 === (int) $result->code) {
          $pretix_info = _ding_pretix_update_pretix_node_info($node);

          // Set pdf ticket plugin.
          $use_pdf_tickets = $node->pretix['ticket_form'] === 'pdf_ticket';
          $results[] = _ding_pretix_update_pdf_plugin($result->data, $use_pdf_tickets, $service_settings, $pretix_info['pretix_slug']);

          $errors = array_filter($results, function ($result) {
            return isset($result->error);
          });
          if (!empty($errors)) {
            drupal_set_message(t('There was a problem configuring the updated event (' . $node->title .  ') in Pretix. Please verify in Pretix that all settings for the event are correct.'), 'error');
          }
          else {
            drupal_set_message(t('The event (' . $node->title . ') was successfully updated in Pretix.'));
          }
        }
        else {
          drupal_set_message(t('The event (' . $node->title . ') could not be updated in Pretix. Contact an administrator.'), 'error');
        }

      }
      else {
        // The event exist in Pretix but the user has changed the
        // 'maintain_copy' setting to false.
        // Best we can do is to take the event offline.
        $result = _ding_pretix_update_live(FALSE, $service_settings, $pretix_info['pretix_slug']);
        if (200 === (int) $result->code) {
          _ding_pretix_update_pretix_node_info($node);
          drupal_set_message(t('The event (' . $node->title .  ') already exists in Pretix. It has been taken offline.'));
        }
        else {
          drupal_set_message(t('The event (' . $node->title .  ') could not be updated in Pretix. Contact an administrator.'), 'error');
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ding_pretix_node_delete($node) {
  // We only handle event nodes.
  if ($node->type == 'ding_event') {
    module_load_include('inc', 'ding_pretix', 'includes/ding_pretix.api_module');
    $service_settings = variable_get('ding_pretix', []);
    $pretix_info = _ding_pretix_get_pretix_node_info($node->nid);

    if ($pretix_info['pretix_slug']) {
      $result = _ding_pretix_delete_event($service_settings, $pretix_info['pretix_slug']);

      if (204 === (int) $result->code) {
        _ding_pretix_delete_pretix_node_info($node->nid);

        drupal_set_message(t('The event (' . $node->title . ') was successfully deleted from Pretix.'));
      }
      else {
        $live_result = _ding_pretix_update_live(FALSE, $service_settings, $pretix_info['pretix_slug']);

        if (200 === (int) $live_result->code) {
          drupal_set_message(t('The event (' . $node->title . ') could not be deleted in Pretix - most likely because there are already orders. It has been taken offline instead.'), 'warning');
        }
        else {
          drupal_set_message(t('The event (' . $node->title . ') could not be deleted in Pretix. Contact an administrator.'), 'error');
        }

        _ding_pretix_delete_pretix_node_info($node->nid);
      }
    }
  }
}

/**
 * Implements hook_entitycache_ENTITY_TYPE_load().
 *
 * Using entity cache load to add the ticket information. Hook_entity_load seams
 * to be called after the entity cache have been set. So this ensures that the
 * link is always inserted into the field.
 */
function ding_pretix_entitycache_node_load($entities) {
  foreach ($entities as $key => $entity) {
    if ($entity->type === 'ding_event') {
      // Uses require once behind the scene.
      module_load_include('inc', 'ding_pretix', 'includes/ding_pretix.api_module');

      $wrapper = entity_metadata_wrapper('node', $entity);
      $service_settings = variable_get('ding_pretix', []);
      $pretix_info = _ding_pretix_get_pretix_node_info($wrapper->getIdentifier());

      if ($pretix_info['maintain_copy']) {
        $url = _ding_pretix_get_event_shop_url($service_settings, $pretix_info['pretix_slug']);
        $wrapper->field_ding_event_ticket_link->set([
          'title' => 'Pretix link',
          'url' => $url,
          'attributes' => [],
        ]);
      }
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function ding_pretix_entity_load($entities, $type) {
  if ($type === 'node' && count($entities) === 1) {
    $keys = array_keys($entities);
    $key = array_pop($keys);

    if ($entities[$key]->type === 'ding_event') {
      module_load_include('inc', 'ding_pretix', 'includes/ding_pretix.api_module');

      $wrapper = entity_metadata_wrapper('node', $entities[$key]);
      $service_settings = variable_get('ding_pretix', []);
      $pretix_info = _ding_pretix_get_pretix_node_info($wrapper->getIdentifier());

      if ($pretix_info['maintain_copy']) {
        $url = _ding_pretix_get_event_shop_url($service_settings, $pretix_info['pretix_slug']);
        $wrapper->field_ding_event_ticket_link->set([
          'title' => 'Pretix link',
          'url' => $url,
          'attributes' => [],
        ]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add pretix section to the node edit form.
 */
function ding_pretix_form_ding_event_node_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'ding_pretix', 'includes/ding_pretix.api_module');
  $nid = $form['nid']['#value'] ?? $form['nid']['#value'];
  $pretix_node_info = _ding_pretix_get_pretix_node_info($nid);
  $pretix_node_defaults = _ding_pretix_get_pretix_node_info_defaults($nid);

  // Service settings.
  $service_settings = variable_get('ding_pretix', []);

  // If we are cloning we need to find and set the pretix settings from the event being cloned from.
  if (isset($form['clone_from_original_nid'])) {
    $original_pretix_node_info = _ding_pretix_get_pretix_node_info($form['clone_from_original_nid']['#value']);
    $capacity = $original_pretix_node_info['capacity'];
    $maintain_copy = $original_pretix_node_info['maintain_copy'];
    $psp_element = $original_pretix_node_info['psp_element'];
    $ticket_form = $original_pretix_node_info['ticket_form'];
  }
  else {
    $capacity = $pretix_node_info['capacity'] ?? $pretix_node_defaults['capacity'];
    $maintain_copy = $pretix_node_info['maintain_copy'] ?? (bool) $pretix_node_defaults['maintain_copy'];
    $psp_element = $pretix_node_info['psp_element'] ?? $pretix_node_defaults['psp_element'] ?? NULL;
    $ticket_form = $pretix_node_info['ticket_form'] ?? $pretix_node_defaults['default_ticket_form'];
  }

  if ($pretix_node_info['pretix_slug']) {
    $pretix_url = _ding_pretix_get_event_admin_url($service_settings, $pretix_node_info['pretix_slug']);
    $pretix_link = l($pretix_url, $pretix_url);
  }
  else {
    $pretix_link = t('None');
  }

  if ($pretix_node_info['maintain_copy']) {
    $pretix_url = _ding_pretix_get_event_admin_url($service_settings, $pretix_node_info['pretix_slug']);
    $pretix_info = t('Please update price in pretix if needed, go to <a href="@pretix-url">the Pretix event</a>. (Note: You may need to log on)', ['@pretix-url' => $pretix_url]);
  }
  else {
    $pretix_info = t('If more ticket types/prices on this event are needed, edit the corresponding event in Pretix after the event has been created.');
  }

  $form['field_ding_event_price']['und'][0]['value']['#description'] = $pretix_info;

  $form['pretix'] = [
    '#type' => 'fieldset',
    '#title' => t('Pretix'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#tree' => TRUE,
  ];

  // We don't allow updates to price after the event is created in pretix, must be updated in pretix.
  if ($pretix_node_info['maintain_copy']) {
    $form['field_ding_event_price']['#disabled'] = TRUE;
  }

  // We don't allow manual change of the ticket link if pretix is used.
  if ($pretix_node_info['maintain_copy']) {
    $form['field_ding_event_ticket_link']['#disabled'] = TRUE;
    $form['field_ding_event_ticket_link']['und'][0]['#description'] = t('This field is managed by pretix for this event.');
  }

  // We don't allow updates to capacity after the event is created in pretix, must be updated in pretix.
  $disabled = empty($pretix_node_info['pretix_slug']) ? FALSE : TRUE;
  $description = $disabled ? t('Please update capacity in pretix if needed.') : t('Optional. Maximum capacity on this event. Set to 0 for unlimited capacity.');

  $form['pretix']['capacity'] = [
    '#type' => 'textfield',
    '#title' => t('Event capacity'),
    '#size' => 5,
    '#maxlength' => 5,
    '#default_value' => $capacity,
    '#description' => $description,
    '#disabled' => $disabled,
  ];

  $ding_pretix_psp_elements = variable_get('ding_pretix_psp_elements', []);
  if ($ding_pretix_psp_elements && !empty($ding_pretix_psp_elements['pretix_psp_meta_key']) && count($ding_pretix_psp_elements['list'])) {
    $options = [];
    foreach ($ding_pretix_psp_elements['list'] as $element) {
      $options[$element['psp_value']] = $element['psp_name'];
    }

    // PSP is a code for accounting. If an event has orders, we don't allow this to be
    // changed, as this would invalidate the accounting.
    if ($pretix_node_info['pretix_slug']) {
      $disabled = _ding_pretix_has_orders($service_settings, $pretix_node_info['pretix_slug']);
    }
    else {
      $disabled = false;
    }
    $description = $disabled ? t('Event has active orders - For accounting reasons the PSP element can no longer be changed.') : t('Select the PSP element the ticket sales should be registered under.');

    $form['pretix']['psp_element'] = [
      '#type' => 'select',
      '#title' => t('PSP Element'),
      '#options' => $options,
      '#default_value' => $psp_element,
      '#required' => TRUE,
      '#empty_option' => t('Select PSP Element'),
      '#description' => $description,
      '#disabled' => $disabled,
    ];
  }

  $form['pretix']['maintain_copy'] = [
    '#type' => 'checkbox',
    '#title' => t('Maintain copy in Pretix'),
    '#default_value' => $maintain_copy,
    '#description' => t('When set, a corresponding event is created and updated on the Pretix ticket booking service.'),
  ];

  $form['pretix']['ticket_form'] = [
    '#type' => 'radios',
    '#title' => t('Use PDF or Email tickets'),
    '#options' => [
      'pdf_ticket' => t('PDF Tickets'),
      'email_ticket' => t('Email Tickets'),
    ],
    '#required' => TRUE,
    '#default_value' => $ticket_form,
    '#description' => t('Use PDF or Email tickets for the event?'),
  ];

  $form['pretix']['pretix_slug'] = [
    '#type' => 'item',
    '#title' => t('Pretix Event'),
    '#markup' => $pretix_link,
    '#description' => t('A link to the corresponding event on the Pretix ticket booking service.'),
  ];

}

/**
 * Implements hook_node_validate().
 *
 * Validate if ticket url has been set or changed. If pretix is selected for the node this field is determined by
 * pretix and should not be altered manually.
 */
function ding_pretix_node_validate($node, $form, &$form_state) {
  if ($node->type === 'ding_event' && $form_state['values']['pretix']['maintain_copy'] === 1 && !empty($form_state['values']['field_ding_event_ticket_link']['und'][0]['url'])) {
    if (!$node->nid) {
      // For new events, if pretix is used we disallow manual entry.
      form_set_error('field_ding_event_ticket_link', '"Book ticket" should not be used if "maintain copy" is selected for Pretix.
                            Please either deselect "maintain copy" or leave "Book ticket" empty.');
    }
    else {
      module_load_include('inc', 'ding_pretix', 'includes/ding_pretix.api_module');
      $pretix_shop_url = ding_pretix_get_shop_url($node->nid);

      // For existing events, if pretix is used we disallow manual change.
      if ($pretix_shop_url !== $form_state['values']['field_ding_event_ticket_link']['und'][0]['url']) {
        form_set_error('field_ding_event_ticket_link', '"Book ticket" should not be changed manually if "maintain copy" is selected for Pretix.
                              Please either deselect "maintain copy" or leave "Book ticket" unchanged.');
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Update the 'field_ding_event_ticket_link' on save.
 */
function ding_pretix_node_presave($node) {
  if ($node->type === 'ding_event') {
    module_load_include('inc', 'ding_pretix', 'includes/ding_pretix.api_module');
    $pretix_shop_url = ding_pretix_get_shop_url($node->nid);
    $wrapper = entity_metadata_wrapper('node', $node);

    $field_ding_event_ticket_link = $wrapper->field_ding_event_ticket_link->value();

    if ($node->pretix['maintain_copy'] === 1) {
      // Save the pretix shop url.
      $wrapper->field_ding_event_ticket_link->set(['url' => $pretix_shop_url]);
    }
    elseif ($pretix_shop_url === $field_ding_event_ticket_link['url']) {
      // Clear the pretix shop url if we do not use pretix.
      $wrapper->field_ding_event_ticket_link->set(['url' => '']);
    }
  }
}

/**
 * Implements hook_clone_node_alter().
 *
 * Ensure that pretix node info is set correctly when nodes are cloned.
 */
function ding_pretix_clone_node_alter(&$node, $context) {
  // We only handles event nodes.
  if ($node->type === 'ding_event') {
    module_load_include('inc', 'ding_pretix', 'includes/ding_pretix.api_module');

    $node_settings = $node->clone_from_original_nid ? _ding_pretix_get_pretix_node_info($node->clone_from_original_nid) : NULL;

    $node->pretix = [
      'nid' => $node->nid,
      'capacity' => (int) $node_settings['capacity'],
      'maintain_copy' => $node_settings['maintain_copy'],
      'psp_element' => $node_settings['psp_element'],
      'ticket_form' => $node_settings['ticket_form'],
    ];

    if ($node_settings['maintain_copy']) {
      $node->field_ding_event_ticket_link = [];
    }
  }
}

/**
 * Implements hook_node_load().
 */
function ding_pretix_node_load($nodes, $types) {
  if (in_array('ding_event', $types)) {
    $result = db_query('SELECT * FROM {ding_pretix} WHERE nid IN (:nids)', [
      ':nids' => array_keys($nodes),
    ]);

    foreach ($result as $record) {
      $nodes[$record->nid]->pretix = [
        'nid' => (int) $record->nid,
        'capacity' => (int) $record->capacity,
        'maintain_copy' => (int) $record->maintain_copy,
        'psp_element' => $record->psp_element,
        'ticket_form' => $record->ticket_form,
      ];
    }
  }
}
